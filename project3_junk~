SELECT users.id, products.id, sales.quantity * sales.price AS amt
FROM users, products, sales
WHERE users.id = sales.uid
AND sales.pid = products.id ;

test=# select * from sales;
 id | uid | pid | quantity | price 
----+-----+-----+----------+-------
  1 |   8 |   6 |       10 |    33
  2 |   6 |   6 |        4 |    33
  3 |   3 |   1 |        3 |    78
  4 |   8 |   8 |        9 |    77
  5 |   3 |  10 |        5 |    64
  6 |   5 |   5 |        3 |     1
  7 |   5 |   6 |        7 |    33
  8 |   4 |   8 |        2 |    77
  9 |   8 |   7 |        7 |    81
 10 |   1 |   2 |        8 |    16
(10 rows)

test=# select * from pc_Big order by uid;
 uid | pid | use_prod_amt 
-----+-----+--------------
   1 |   2 |          128
   3 |  10 |          320
   3 |   1 |          234
   4 |   8 |          154
   5 |   5 |            3
   5 |   6 |          231
   6 |   6 |          132
   8 |   8 |          693
   8 |   7 |          567
   8 |   6 |          330
(10 rows)


test=# select * from pc_StateProd;
  st_name   | prod_id | st_prod_amt 
------------+---------+-------------
 Tennessee  |       6 |         231
 Wisconsin  |      10 |         320
 Utah       |       6 |         132
 Utah       |       8 |         154
 Wisconsin  |       1 |         234
 Kentucky   |       7 |         567
 Tennessee  |       5 |           3
 California |       2 |         128
 Kentucky   |       6 |         330
 Kentucky   |       8 |         693
(10 rows)


test=# select * from pc_UseCat;
 uid | cid | use_cat_amt 
-----+-----+-------------
   3 |   9 |         234
   8 |   2 |         693
   6 |   9 |         132
   4 |   2 |         154
   8 |   1 |         567
   8 |   9 |         330
   1 |   6 |         128
   5 |   9 |         231
   5 |   4 |           3
   3 |   6 |         320
(10 rows)

test=# select * from pc_StateCat;
  st_name   | cid | st_cat_amt 
------------+-----+------------
 Wisconsin  |   6 |        320
 California |   6 |        128
 Kentucky   |   2 |        693
 Kentucky   |   9 |        330
 Kentucky   |   1 |        567
 Utah       |   2 |        154
 Tennessee  |   9 |        231
 Tennessee  |   4 |          3
 Wisconsin  |   9 |        234
 Utah       |   9 |        132
(10 rows)

insert into u_t (id, name) select id,name from users order by name asc offset 0 limit 20;



select s.uid, sum(s.quantity*s.price) from  u_t u, sales s  where s.uid=u.id group by s.uid;



INSERT INTO pc_Users
SELECT pc_UseCat.uid, SUM(pc_UseCat.use_cat_amt)
FROM pc_UseCat
GROUP BY pc_UseCat.uid;

COALESCE

select users.id, sum(sales.quantity * sales.price) as total from users left outer join sales on sales.uid = users.id group by total;

select users.id, COALESCE(sum(sales.quantity * sales.price), 0) as total from users left outer join sales on sales.uid = users.id group by users.id order by total desc;


SELECT users.id, products.id, COALESCE(sales.quantity * sales.price, 0) AS amt FROM users LEFT OUTER JOIN sales ON users.id = sales.uid RIGHT OUTER JOIN products ON sales.pid = products.id ;

SELECT users.id as uid, products.id as pid, COALESCE(sales.quantity * sales.price, 0) AS amt FROM users LEFT OUTER JOIN sales ON users.id = sales.uid LEFT OUTER JOIN products on products.id = sales.pid order by uid;

test=# select users.id as uid, products.id as pid, coalesce(sales.quantity * sales.price, 0) as amt from users, products, sales where sales.uid = users.id and products.id = sales.pid group by users.id, products.id, amt;

CREATE TABLE UsersAndProd
select users.id as uid, products.id as pid from users, products where group by users.id, products.id;


 uid |  uname   | pid | pname | user_x_prod_amt 
-----+----------+-----+-------+-----------------
   3 | A_user_2 |   9 | L_P9  |             623
   3 | A_user_2 |   3 | X_P3  |             140
   5 | N_user_4 |   8 | F_P8  |             180
   5 | N_user_4 |   8 | F_P8  |             126
   7 | B_user_6 |   3 | X_P3  |             140
   7 | B_user_6 |   2 | X_P2  |               1
   7 | B_user_6 |   2 | X_P2  |               6
   7 | B_user_6 |   2 | X_P2  |               5
   8 | D_user_7 |   6 | W_P6  |              54
  10 | F_user_9 |   2 | X_P2  |               2
(10 rows)


 id | uid | pid | quantity | price 
----+-----+-----+----------+-------
  7 |   3 |   9 |        7 |    89
 10 |   3 |   3 |       10 |    14
  5 |   5 |   8 |       10 |    18
  3 |   5 |   8 |        7 |    18
  6 |   7 |   3 |       10 |    14
  2 |   7 |   2 |        1 |     1
  1 |   7 |   2 |        6 |     1
  8 |   7 |   2 |        5 |     1
  9 |   8 |   6 |        9 |     6
  4 |  10 |   2 |        2 |     1



CREATE TABLE pc_CustomersAll (
uid INT,
uname TEXT,
pid INT,
pname TEXT,
user_x_prod_amt INT
);

INSERT INTO pc_CustomersAll
SELECT temp.uid, temp.pid, COALESCE(sum(sales.quantity * sales.price), 0) AS user_x_prod_amt
FROM
(select users.id as uid, products.id as pid from users, products group by uid, pid) AS temp LEFT OUTER JOIN sales ON temp.uid = sales.uid AND temp.pid = sales.pid;



//////////////////////

test=# select n.uid, n.pid, coalesce(sum(sales.price * sales.quantity), 0) from new_table as n left outer join sales on n.uid = sales.uid and n.pid = sales.pid group by n.uid, n.pid order by n.uid, n.pid;

////////////////////////


  id | uid | pid | quantity | price 
----+-----+-----+----------+-------
  7 |   3 |   9 |        7 |    89
 10 |   3 |   3 |       10 |    14
  5 |   5 |   8 |       10 |    18
  3 |   5 |   8 |        7 |    18
  6 |   7 |   3 |       10 |    14
  2 |   7 |   2 |        1 |     1
  1 |   7 |   2 |        6 |     1
  8 |   7 |   2 |        5 |     1
  9 |   8 |   6 |        9 |     6
  4 |  10 |   2 |        2 |     1

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DROP TABLE IF EXISTS new_table; CREATE TABLE new_table as (select users.id as uid, products.id as pid, pc_users.use_amt as total from users, products, pc_users WHERE users.id = pc_users.uid group by users.id, pid, pc_users.use_amt);

DROP TABLE IF EXISTS pc_trent; CREATE TABLE pc_trent as (select n.uid, n.pid, n.total, coalesce(sum(sales.price * sales.quantity), 0) from new_table as n left outer join sales on n.uid = sales.uid and n.pid = sales.pid group by n.uid, n.pid, n.total order by n.total, n.uid, n.pid);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

select users.id as uid, products.id as pid, pc_users.use_amt from users, products, pc_users WHERE users.id = pc_users.uid group by uid, pid;

select users.id as uid, products.id as pid, pc_users.use_amt as total from users, products, pc_users WHERE users.id = pc_users.uid group by users.id, pid, pc_users.use_amt






select users.id as uid, products.id as pid, pc_users.use_amt, pc_Prod.prod_amt from users, products, pc_users, pc_Prod WHERE users.id = pc_users.uid and pc_Prod.pid = products.id group by uid, pid;




DROP TABLE IF EXISTS new_table; 
CREATE TABLE new_table as (select users.id as uid, products.id as pid, pc_users.use_amt as total, pc_Prod.prod_amt as prod_total 
                           from users, products, pc_users, pc_Prod 
                           WHERE users.id = pc_users.uid 
                           and pc_Prod.pid = products.id 
                           group by users.id, products.id, pc_users.use_amt, pc_Prod.prod_amt 
                           order by pc_users.use_amt desc, pc_Prod.prod_amt desc);


DROP TABLE IF EXISTS pc_trent; 
CREATE TABLE pc_trent as (select n.uid, n.pid, n.total, n.prod_total coalesce(sum(sales.price * sales.quantity), 0) 
                          from new_table as n 
                          left outer join sales 
                          on n.uid = sales.uid 
                          and n.pid = sales.pid 
                          group by n.uid, n.pid, n.total, n.prod_total 
                          order by n.total, n.uid, n.pid);



select users.id as uid, products.id as pid, pc_users.use_amt as total, pc_Prod.prod_amt as prod_total from users, products, pc_users, pc_Prod WHERE users.id = pc_users.uid and pc_Prod.pid = products.id group by users.id, products.id, pc_users.use_amt, pc_Prod.prod_amt order by pc_users.use_amt desc, pc_Prod.prod_amt desc;


select t.uid, t.cid, coalesce(sum(sales.price * sales.quantity), 0) as amt from temp_UseCat as t left outer join sales on t.uid = sales.uid left outer join products on t.cid = products.cid

 id | name |          description           
----+------+--------------------------------
  1 | C1   | This is the number 1 category
  2 | C2   | This is the number 2 category
  3 | C3   | This is the number 3 category
  4 | C4   | This is the number 4 category
  5 | C5   | This is the number 5 category
  6 | C6   | This is the number 6 category
  7 | C7   | This is the number 7 category
  8 | C8   | This is the number 8 category
  9 | C9   | This is the number 9 category
 10 | C10  | This is the number 10 category



products
 id | cid | name  |  sku   | price 
----+-----+-------+--------+-------
  1 |   9 | E_P1  | SKU_1  |    89
  2 |   5 | X_P2  | SKU_2  |     1
  3 |   3 | X_P3  | SKU_3  |    14
  4 |   2 | R_P4  | SKU_4  |     8
  5 |   5 | F_P5  | SKU_5  |    11
  6 |   3 | W_P6  | SKU_6  |     6
  7 |  10 | F_P7  | SKU_7  |    40
  8 |   6 | F_P8  | SKU_8  |    18
  9 |  10 | L_P9  | SKU_9  |    89
 10 |  10 | F_P10 | SKU_10 |    29
(10 rows)

  uid| pid |  amt
-----------------
   3 |   6 |  763
   3 |   4 |  763
   3 |   7 |  763
   3 |  10 | 2289
   3 |   2 |  763
   3 |   9 |  763
   3 |   5 | 1526
   3 |   3 | 1526
   3 |   8 |  763
   3 |   1 |  763


SELECT * FROM pc_UseCatAmt where cid = 3 desc limit 20;


test=# select * from temp_ProdCatAmt2;
 pid | cid | amt 
-----+-----+-----
   2 |   5 |  14
   3 |   3 | 280
  10 |  10 |  29
   6 |   3 |  60
   8 |   6 | 306
   9 |  10 | 623

sales:
 id | uid | pid | quantity | price 
----+-----+-----+----------+-------
  1 |   7 |   2 |        6 |     1
  2 |   7 |   2 |        1 |     1
  3 |   5 |   8 |        7 |    18
  4 |  10 |   2 |        2 |     1
  5 |   5 |   8 |       10 |    18
  6 |   7 |   3 |       10 |    14
  7 |   3 |   9 |        7 |    89
  8 |   7 |   2 |        5 |     1
  9 |   8 |   6 |        9 |     6
 10 |   3 |   3 |       10 |    14
 11 |  13 |  10 |        1 |    29
 12 |  13 |   6 |        1 |     6
(12 rows)

select users.id as uid, products.id as pid, pc_UseCatAmt.amt as total, pc_ProdCatAmt.prod_amt as prod_total from users, products, pc_UseCatAmt, pc_ProdCatAmt WHERE users.id = pc_UseCatAmt.uid and pc_ProdCatAmt.pid = products.id group by users.id, products.id, pc_UseCatAmt.amt, pc_ProdCatAmt.prod_amt order by pc_UseCatAmt.amt desc, pc_ProdCatAmt.prod_amt desc;

select users.id as uid, products.id as pid from users, products group by users.id, products.id;


INSERT INTO pc_Users
SELECT users.id, users.name, COALESCE(sum(sales.quantity * sales.price), 0) as amt
FROM users left outer join sales 
on sales.uid = users.id 
group by users.id 
order by amt desc;

SELECT * FROM pc_UserProdAmt AS pcu left outer join (SELECT t.pid FROM pc_ProdAmt as t ORDER BY t.total desc LIMIT 10) on pcu.pid = t.pid group by pcu.uid;


uid  
------
 9949
 8404
   74
 3912
 1032
 2871
 8478
 3577
 1046
 5235
 7668
 7774
 6136
 9386
 2896
 1856
 1193
 3633
 5293
 3761
(20 rows)

test=# select ppa.pid from pc_ProdAmt as ppa order by ppa.total desc limit 10;
 pid 
-----
 444
 354
 332
 393
 124
 352
 514
 641
 544
 966
(10 rows)
//////////////////////////////////////////////////////
DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, uid INT); INSERT INTO temp1(uid) select pua.uid from pc_UsersAmt as pua order by pua.total desc limit 20; DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select ppa.pid from pc_ProdAmt as ppa order by ppa.total desc limit 10; DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, uid INT, pid INT); INSERT INTO temp3(uid, pid) select t1.uid, t2.pid from temp1 as t1, temp2 as t2;


select t3.t_rank, t3.uid, t3.pid, coalesce(pc_UserProdAmt.total,0) as total
from temp3 as t3 
left outer join pc_UserProdAmt on t3.uid = pc_UserProdAmt.uid 
AND t3.pid = pc_UserProdAmt.pid
order by t3.t_rank;










DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 as (select pua.uid from pc_UsersAmt as pua order by pua.total desc limit 20);
DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 as (select ppa.pid from pc_ProdAmt as ppa order by ppa.total desc limit 10);
DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 as (select t1.uid, t2.pid from temp1 as t1, temp2 as t2);



////////////////////////////////////////////////////////////////////////////////////
DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, uid INT); INSERT INTO temp1(uid) select uid from pc_UseCatAmt where cid = 1 order by total desc limit 20; DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select ppa.pid from pc_ProdAmt as ppa, products as p where p.cid = 1 and ppa.pid = p.id order by ppa.total desc limit 10; DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, uid INT, pid INT); INSERT INTO temp3(uid, pid) select t1.uid, t2.pid from temp1 as t1, temp2 as t2;


select t3.t_rank, t3.uid, t3.pid, coalesce(pc_UserProdAmt.total,0) as total
from temp3 as t3 
left outer join pc_UserProdAmt on t3.uid = pc_UserProdAmt.uid 
AND t3.pid = pc_UserProdAmt.pid join products on products.id = t3.pid and products.cid = 1 
order by t3.t_rank;


select ppa.pid, ppa.total from pc_ProdAmt as ppa, products as p where p.cid = 1 and ppa.pid = p.id order by ppa.total desc limit 10;












DROP TABLE IF EXISTS temp1; 
CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, state TEXT); 
INSERT INTO temp1(state) select psa.state from pc_StateAmt as psa order by psa.total desc limit 20; 

DROP TABLE IF EXISTS temp2; 
CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); 
INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa order by pspa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, state TEXT, pid INT); INSERT INTO temp3(state, pid) select t1.state, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.state, t3.pid, coalesce(pc_StateProdAmt.total,0) as total
from temp3 as t3
left outer join pc_StateProdAmt on t3.state = pc_StateProdAmt.state
AND t3.pid = pc_StateProdAmt.pid
order by t3.t_rank;



SELECT * FROM pc_UsersAmt as pua, users as u where pua.uid = u.id and u.state = 'Kansas' ORDER BY pua.total desc LIMIT 20;


//case state all all 00
DROP TABLE IF EXISTS temp1;
CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT);
INSERT INTO temp1(sid) select states.id from states, pc_StateAmt as psa
WHERE states.name = psa.state order by psa.total desc limit 20;

DROP TABLE IF EXISTS temp2;
CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT);
INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa order by pspa.total desc limit 10;

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total
from temp3 as t3 join states on t3.sid = states.id
left outer join pc_StateProdAmt on states.name = pc_StateProdAmt.state
AND t3.pid = pc_StateProdAmt.pid
order by t3.t_rank;





DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, pc_StateAmt as psa WHERE states.name = psa.state order by psa.total desc limit 20; DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa order by pspa.total desc limit 10; DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;




DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, products, pc_StateCatAmt as psca WHERE states.name = psca.state AND products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 20; DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select products.id from products, pc_StateCatAmt as psca WHERE products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 10; DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateCatAmt.total,0) as total from products join temp3 as t3 on products.id = t3.pid left outer join pc_StateCatAmt on products.cid = pc_StateCatAmt.cid and pc_StateCatAmt.cid = 1 order by t3.t_rank;


/////////////////////////////////////////////////
DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, pc_StateAmt as psa WHERE states.name = psa.state AND states.name = 'Kansas' order by psa.total desc limit 20; DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa, states where states.name = pspa.state and states.name = 'Kansas' order by pspa.total desc limit 10; DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

DROP TABLE IF EXISTS temp1;
CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT);
INSERT INTO temp1(sid) select states.id from states, pc_StateAmt as psa
                       WHERE states.name = psa.state AND states.name = ?
                       order by psa.total desc limit 20;

DROP TABLE IF EXISTS temp2;
CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT);
INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa, states
                       where states.name = pspa.state and states.name = ?
                       order by pspa.total desc limit 10;

DROP TABLE IF EXISTS temp3;
CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total from temp3 as t3 join states on t3.sid = states.id left outer join pc_StateProdAmt on states.name = pc_StateProdAmt.state AND t3.pid = pc_StateProdAmt.pid order by t3.t_rank;

////////////////////////////////////////////////////

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states WHERE states.name = 'Kansas';

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select pspa.pid from pc_StateCatAmt as psca, states, products where states.name = psca.state and psca.cid = products.cid and psca.cid = 'Kansas' and states.name = 'Kansas' order by pspa.total desc limit 10;

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total
from temp3 as t3 join states on t3.sid = states.id
left outer join pc_StateProdAmt on states.name = pc_StateProdAmt.state
AND t3.pid = pc_StateProdAmt.pid
order by t3.t_rank;

select states.id, states.name, psca.total from states, products, pc_StateCatAmt as psca WHERE states.name = psca.state AND products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 20


select states.id from states, products, pc_StateCatAmt as psca WHERE states.name = psca.state AND products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 20

///////////////////////////////////////////////////////////////////////////////////////


select s.name, pc.total from states as s, pc_StateCatAmt as pc where s.name = pc.state and pc.cid = 1 order by pc.total desc limit 20

select pspa.pid, p.name, pspa.total from pc_StateProdAmt as pspa, products as p where p.id = pspa.pid and p.cid = 1 order by pspa.total desc limit 10
				

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); "
						+ "INSERT INTO temp1(sid) select states.id from states, products, pc_StateCatAmt as psca "
						+ "WHERE states.name = psca.state AND products.cid = psca.cid AND psca.cid = "
						+ category
						+ " order by psca.total desc limit 20; DROP TABLE IF EXISTS temp2; "
						+ "CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); "
						+ "INSERT INTO temp2(pid) select products.id from products, pc_StateCatAmt as psca "
						+ "WHERE products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 10; "
						+ "DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); "
						+ "INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>






--------------------------------------------------------------------------------------------
-- *********  user view **********
--------------------------------------------------------------------------------------------
-- case 0,0
-- state:off, category:off

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, uid INT); INSERT INTO temp1(uid) select pua.uid from pc_UsersAmt as pua order by pua.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select ppa.pid from pc_ProdAmt as ppa order by ppa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, uid INT, pid INT); INSERT INTO temp3(uid, pid) select t1.uid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.uid, t3.pid, coalesce(pc_UserProdAmt.total,0) as total from temp3 as t3 left outer join pc_UserProdAmt on t3.uid = pc_UserProdAmt.uid AND t3.pid = pc_UserProdAmt.pid order by t3.t_rank;


-- case 1,0
-- state:on, category:off


DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, uid INT); INSERT INTO temp1(uid) select pua.uid from pc_UsersAmt as pua WHERE pua.uid IN (select * from users where users.state = 'Kansas') order by pua.total desc limit 20; 


-- fast as fuck version
DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select ppa.pid from pc_ProdAmt as ppa, pc_UserStateProdCatAmt WHERE ppa.pid = pc_UserStateProdCatAmt.pid AND pc_UserStateProdCatAmt.state = 'Kansas' order by ppa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, uid INT, pid INT); INSERT INTO temp3(uid, pid) select t1.uid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.uid, t3.pid, coalesce(pc_UserProdAmt.total,0) as total from temp3 as t3 left outer join pc_UserStateProdCatAmt on t3.uid = pc_UserStateProdCatAmt.uid AND t3.pid = pc_UserStateProdCatAmt.pid AND pc_UserStateProdCatAmt.state = 'Kansas' order by t3.t_rank;


-- case 1 1
-- state:on, category:on

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, uid INT); INSERT INTO temp1(uid) select pua.uid from pc_UsersAmt as pua WHERE pua.uid = pc_UserStateProdCatAmt.uid AND pc_UserStateProdCatAmt.state = 'Kansas' AND pc_UserStateProdCatAmt.cid = 1 order by pua.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select ppa.pid from pc_ProdAmt as ppa WHERE ppa.pid = pc_UserStateProdCatAmt.pid AND pc_UserStateProdCatAmt.state = 'Kansas' AND pc_UserStateProdCatAmt.cid = 1 order by ppa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, uid INT, pid INT); INSERT INTO temp3(uid, pid) select t1.uid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.uid, t3.pid, coalesce(pc_UserProdAmt.total,0) as total from temp3 as t3 left outer join pc_UserStateProdCatAmt on t3.uid = pc_UserStateProdCatAmt.uid AND t3.pid = pc_UserStateProdCatAmt.pid AND pc_UserStateProdCatAmt.cid = 1 AND pc_UserStateProdCatAmt.state = 'Kansas' order by t3.t_rank;


---------------------------------------------------------------------------------------------
-- ************* state view **************
----------------------------------------------------------------------------------------------

-- case 0,0
-- state:off, category:off

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, pc_StateAmt as psa WHERE states.name = psa.state order by psa.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa order by pspa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total from temp3 as t3 join states on t3.sid = states.id
left outer join pc_StateProdAmt on states.name = pc_StateProdAmt.state AND t3.pid = pc_StateProdAmt.pid
order by t3.t_rank;


-- case 1,0
-- state:on, category:off

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, pc_StateAmt as psa WHERE states.name = psa.state AND states.name = 'Kansas' order by psa.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select pspa.pid from pc_StateProdAmt as pspa, states where states.name = pspa.state and states.name = 'Kansas' order by pspa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total from temp3 as t3 join states on t3.sid = states.id
left outer join pc_StateProdAmt on states.name = pc_StateProdAmt.state AND t3.pid = pc_StateProdAmt.pid
order by t3.t_rank;


-- case 0,1
-- state:off, category:on

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, products, pc_StateCatAmt as psca WHERE states.name = psca.state AND products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select products.pid from products, pc_StateCatAmt as psca WHERE products.cid = psca.cid AND psca.cid = 1 order by psca.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateCatAmt.total,0) as total from products join temp3 as t3 on products.id = t3.pid 
left outer join pc_StateCatAmt on products.cid = pc_StateCatAmt.cid and pc_StateCatAmt.cid = 1 order by t3.t_rank;


-- case 1,1
-- state:on, category:on

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select states.id from states, pc_StateCatAmt as psca WHERE states.name = psca.state AND states.name = 'Kansas' order by psca.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) select pspa.pid from pc_StateCatAmt as psca, states, products where states.name = psca.state and psca.cid = products.cid and psca.cid = 1 and states.name = 'Kansas' order by pspa.total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total from temp3 as t3 join states on t3.sid = states.id
left outer join pc_StateProdAmt on states.name = pc_StateProdAmt.state AND t3.pid = pc_StateProdAmt.pid
order by t3.t_rank;


/////////////////////////////////////////////////////////////////////////////////////

SELECT * from pc_StateAmt where state = 'Kansas';
SELECT * FROM pc_StateProdAmt as pspa where state = 'Kansas' order by total desc limit 10;

DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) SELECT s.id from pc_StateAmt as pc, states as s where pc.state = s.name and s.name = 'Kansas';

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) SELECT pspa.pid FROM pc_StateProdAmt as pspa where state = 'Kansas' order by total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

SELECT * FROM pc_cust10 order by total desc, prod_total desc;




SQL_3 = "select t3.t_rank, t3.sid, t3.pid, coalesce(pc_StateProdAmt.total,0) as total "+
						"from temp3 as t3 join states on t3.sid = states.id left outer join pc_StateProdAmt "+
				        "on states.name = pc_StateProdAmt.state AND t3.pid = pc_StateProdAmt.pid order by t3.t_rank;";

test=# select * from temp3;
 t_rank | sid | pid 
--------+-----+-----
      1 |  48 | 332
      2 |  48 | 544
      3 |  48 | 470
      4 |  48 | 972
      5 |  48 | 354
      6 |  48 |  89
      7 |  48 | 444
      8 |  48 | 124
      9 |  48 | 137
     10 |  48 | 352
(10 rows)



select pc.uid, pc.name, pc.total from pc_UsersAmt as pc, users as u where pc.uid = u.id and u.state = 'Kansas' order by pc.total desc limit 20
select t3.t_rank, t3.uid, pid coalesce(pc_UserProdAmt.total,0) as total from temp3 as t3 left outer join 



SELECT * FROM pc_StateProdAmt as pc where state = 'Kansas' order by total desc limit 10







DROP TABLE IF EXISTS temp1; CREATE TABLE temp1 (u_rank SERIAL PRIMARY KEY, sid INT); INSERT INTO temp1(sid) select pc.uid, u.name, pc.total from pc_UsersAmt as pc, users as u where pc.uid = u.id and u.state = 'Kansas' order by pc.total desc limit 20; 

DROP TABLE IF EXISTS temp2; CREATE TABLE temp2 (p_Rank SERIAL PRIMARY KEY, pid INT); INSERT INTO temp2(pid) SELECT pspa.pid FROM pc_StateProdAmt as pspa where state = 'Kansas' order by total desc limit 10; 

DROP TABLE IF EXISTS temp3; CREATE TABLE temp3 (t_rank SERIAL PRIMARY KEY, sid INT, pid INT); INSERT INTO temp3(sid, pid) select t1.sid, t2.pid from temp1 as t1, temp2 as t2;

